import streamlit as st
import re

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞—Ä—Ç–µ—Ä–∏–π: –∫–∞–∫ –∏—Å–∫–∞—Ç—å + —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
ARTERIES = {
    "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏": "—Å—Ç–≤–æ–ª–∞ –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–ø–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø–µ—Ä–µ–¥–Ω–µ–π –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ç–≤–∏",
    "–æ–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–æ–≥–∏–±–∞—é—â–µ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–≤–µ—Ç–≤—å —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è": "–≤–µ—Ç–≤–∏ —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è",
    "–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø—Ä–∞–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–∑–∞–¥–Ω—è—è –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å": "–∑–∞–¥–Ω–µ–π –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –≤–µ—Ç–≤–∏",
    "–ª–µ–≤–∞—è –∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å": "–ª–µ–≤–æ–π –∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –≤–µ—Ç–≤–∏",
    "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
}

def parse_coronary_report(text):
    if not text.strip():
        return "–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏."
    
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    findings = []

    for artery_key, artery_gen in ARTERIES.items():
        pattern = re.compile(re.escape(artery_key), re.IGNORECASE)
        for line in lines:
            if pattern.search(line):
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–∫–ª—é–∑–∏—é
                occlusion = bool(re.search(r'–æ–∫–∫–ª—é–∑–∏—è', line, re.IGNORECASE))
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å—Ç–µ–Ω–æ–∑–∞
                stenosis_match = re.search(r'(\d+)%', line)
                percent = int(stenosis_match.group(1)) if stenosis_match else None

                # –°—Ç–µ–Ω—Ç –∏ —Ä–µ—Å—Ç–µ–Ω–æ–∑
                has_stent = bool(re.search(r'—Å—Ç–µ–Ω—Ç', line, re.IGNORECASE))
                no_restenosis = bool(re.search(r'–±–µ–∑\s+—Ä–µ—Å—Ç–µ–Ω–æ–∑–∞', line, re.IGNORECASE))
                has_restenosis = bool(re.search(r'—Ä–µ—Å—Ç–µ–Ω–æ–∑', line, re.IGNORECASE)) and not no_restenosis

                findings.append({
                    'artery': artery_key,
                    'genitive': artery_gen,
                    'occlusion': occlusion,
                    'percent': percent,
                    'has_stent': has_stent,
                    'no_restenosis': no_restenosis,
                    'has_restenosis': has_restenosis,
                    'raw_line': line
                })
                break  # –æ–¥–Ω–∞ –∞—Ä—Ç–µ—Ä–∏—è ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑–∞
    has_atherosclerosis = False
    has_significant = False

    for f in findings:
        line_lower = f['raw_line'].lower()
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑–∞: –Ω–µ—Ä–æ–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã, –∫–∞–ª—å—Ü–∏–Ω–æ–∑ –∏ —Ç.–¥.
        if (f['occlusion'] or 
            f['percent'] is not None or 
            any(kw in line_lower for kw in ['–Ω–µ—Ä–æ–≤–Ω', '–∫–∞–ª—å—Ü', '–∞—Ç–µ—Ä–æ—Å–∫–ª', '–ø–æ—Ä–∞–∂–µ–Ω', '–±–ª—è—à–∫', '—Å—É–∂–µ–Ω–∏–µ'])):
            has_atherosclerosis = True
            if f['occlusion'] or (f['percent'] is not None and f['percent'] >= 50):
                has_significant = True

    has_stents = any(f['has_stent'] for f in findings)

    # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ ===
    if has_significant:
        parts = []
        for f in findings:
            desc = ""
            if f['occlusion']:
                desc = f"–û–∫–∫–ª—é–∑–∏—è {f['genitive']}"
            elif f['percent'] is not None and f['percent'] >= 50:
                desc = f"–°—Ç–µ–Ω–æ–∑ {f['genitive']} {f['percent']}%"
            else:
                # –ê—Ä—Ç–µ—Ä–∏—è –±–µ–∑ –∑–Ω–∞—á–∏–º–æ–≥–æ —Å—Ç–µ–Ω–æ–∑–∞, –Ω–æ —Å–æ —Å—Ç–µ–Ω—Ç–æ–º ‚Äî –≤–∫–ª—é—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                if f['has_stent']:
                    stent_str = "—Å—Ç–µ–Ω—Ç"
                    if f['no_restenosis']:
                        stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                    elif f['has_restenosis']:
                        stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                    else:
                        stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                    desc = f"–°—Ç–µ–Ω—Ç {f['genitive']} {stent_str.split(' ', 1)[1]}"
                else:
                    continue

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–µ–Ω—Ç –∫ –∑–Ω–∞—á–∏–º—ã–º –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º
            if f['has_stent'] and (f['occlusion'] or (f['percent'] is not None and f['percent'] >= 50)):
                stent_str = "—Å—Ç–µ–Ω—Ç"
                if f['no_restenosis']:
                    stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                elif f['has_restenosis']:
                    stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                else:
                    stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                desc += f", {stent_str}"

            if desc:
                parts.append(desc)

        diagnosis = "–ê—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π."
        if parts:
            diagnosis += " " + ". ".join(parts) + "."
        return diagnosis

    elif has_atherosclerosis or has_stents:
        parts = []
        for f in findings:
            if f['has_stent']:
                stent_str = f"–°—Ç–µ–Ω—Ç {f['genitive']}"
                if f['no_restenosis']:
                    stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                elif f['has_restenosis']:
                    stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                else:
                    stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                parts.append(stent_str)
        diagnosis = "–ù–µ—Å—Ç–µ–Ω–æ–∑–∏—Ä—É—é—â–∏–π –∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π."
        if parts:
            diagnosis += " " + ". ".join(parts) + "."
        return diagnosis

    else:
        return "–ò–Ω—Ç–∞–∫—Ç–Ω—ã–µ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–µ –∞—Ä—Ç–µ—Ä–∏–∏."

# === Streamlit UI ===
st.set_page_config(page_title="–ö–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Üí –î–∏–∞–≥–Ω–æ–∑", page_icon="ü´Ä")
st.title("ü´Ä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –¥–∏–∞–≥–Ω–æ–∑")
st.markdown("""
–ü–æ –≤–∞—à–∏–º –ø—Ä–∞–≤–∏–ª–∞–º:
- **–û–∫–∫–ª—é–∑–∏—è** —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ ¬´–û–∫–∫–ª—é–∑–∏—è...¬ª
- **–°—Ç–µ–Ω—Ç** —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
- –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ—Ä–∞–∂–µ–Ω–∏–π ‚Üí ¬´–ù–µ—Å—Ç–µ–Ω–æ–∑–∏—Ä—É—é—â–∏–π –∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑...¬ª –∏–ª–∏ ¬´–ò–Ω—Ç–∞–∫—Ç–Ω—ã–µ...¬ª
""")

# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
example1 = """–°—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏: –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏–π.
–ü–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è: —Å –Ω–µ—Ä–æ–≤–Ω—ã–º–∏ –∫–æ–Ω—Ç—É—Ä–∞–º–∏, —Å—Ç–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏–º, –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞.
–û–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è: –±–µ–∑ –∑–Ω–∞—á–∏–º—ã—Ö –ø–æ—Ä–∞–∂–µ–Ω–∏–π, —Å—Ç–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø—Ä–æ—Ö–æ–¥–∏–º, –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞.
–ü—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è: —Å—Ç–µ–Ω–æ–∑ –≤ —Å/3 –¥–æ 60%. –°—Ç–µ–Ω—Ç –≤ –¥/3 ‚Äî –ø—Ä–æ—Ö–æ–¥–∏–º, —Ä–µ—Å—Ç–µ–Ω–æ–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π."""

example2 = """–°—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏: —Å—Ç–µ–Ω–æ–∑ 50%.
–ü–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è: –æ–∫–∫–ª—é–∑–∏—è –æ—Ç —É—Å—Ç—å—è.
–û–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è: —Å—Ç–µ–Ω—Ç –≤ –ø/—Å-–¥/—Å –ø—Ä–æ—Ö–æ–¥–∏–º, –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞, –¥–∞–ª–µ–µ —Å—Ç–µ–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ 75%.
–ü—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è: —Å—Ç–µ–Ω–æ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç–≤–æ–ª–∞ 99%."""

tab1, tab2 = st.tabs(["–í–∞—à —Ç–µ–∫—Å—Ç", "–ü—Ä–∏–º–µ—Ä—ã"])

with tab1:
    user_input = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏:", height=300)

with tab2:
    if st.button("–ü—Ä–∏–º–µ—Ä 1: —Å—Ç–µ–Ω—Ç—ã + 60% —Å—Ç–µ–Ω–æ–∑"):
        user_input = example1
    if st.button("–ü—Ä–∏–º–µ—Ä 2: –º–Ω–æ–≥–æ—Å–æ—Å—É–¥–∏—Å—Ç–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ"):
        user_input = example2

if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑", type="primary"):
    with st.spinner("–ê–Ω–∞–ª–∏–∑..."):
        diagnosis = parse_coronary_report(user_input)
    st.success("–ì–æ—Ç–æ–≤–æ!")
    st.subheader("–î–∏–∞–≥–Ω–æ–∑:")
    st.write(diagnosis)

st.markdown("---")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –∫–∞—Ä–¥–∏–æ–ª–æ–≥–æ–≤. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ–±–ª–∞–∫–æ.")
