import streamlit as st
import re

# –ü–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è ‚Üí —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
ARTERIES = {
    "–ø–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø–µ—Ä–µ–¥–Ω–µ–π –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–æ–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–æ–≥–∏–±–∞—é—â–µ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø—Ä–∞–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏": "—Å—Ç–≤–æ–ª–∞ –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ç–≤–∏",
    "–≤–µ—Ç–≤—å —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è": "–≤–µ—Ç–≤–∏ —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è",
    "–∑–∞–¥–Ω—è—è –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å": "–∑–∞–¥–Ω–µ–π –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –≤–µ—Ç–≤–∏",
    "–ª–µ–≤–∞—è –∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å": "–ª–µ–≤–æ–π –∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –≤–µ—Ç–≤–∏",
    "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
}

# –°–æ–∫—Ä–∞—â–µ–Ω–∏—è ‚Üí –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
ABBREVIATIONS = {
    "–ø–Ω–∞": "–ø–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–æ–∞": "–æ–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–ø–∫–∞": "–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–ª–∫–∞": "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "—Å—Ç–≤–æ–ª": "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–¥–±": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å",
    "–¥–≤": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å",
    "–∑–º–∂–≤": "–∑–∞–¥–Ω—è—è –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å",
    "–ª–∂–≤": "–ª–µ–≤–∞—è –∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å",
    "–≤—Ç–∫": "–≤–µ—Ç–≤—å —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è",
    "–ø–∞": "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
}

def find_artery_in_line(line):
    line_lower = line.lower().strip()
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–≤–æ–µ—Ç–æ—á–∏—è –∏ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    line_clean = re.sub(r'[^\w\s]', ' ', line_lower)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–≤ –ø–æ—Ä—è–¥–∫–µ –¥–ª–∏–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π)
    for abbr in sorted(ABBREVIATIONS.keys(), key=len, reverse=True):
        if re.search(r'\b' + re.escape(abbr) + r'\b', line_clean):
            return ABBREVIATIONS[abbr]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    for full in ARTERIES.keys():
        if full.lower() in line_clean:
            return full
    return None

def parse_coronary_report(text):
    if not text.strip():
        return "–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏."
    
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    findings = []

    for line in lines:
        artery_full = find_artery_in_line(line)
        if not artery_full:
            continue

        if artery_full not in ARTERIES:
            continue

        genitive = ARTERIES[artery_full]

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
        occlusion = bool(re.search(r'–æ–∫–∫–ª—é–∑–∏—è', line, re.IGNORECASE))
        stenosis_match = re.search(r'(\d+)%', line)
        percent = int(stenosis_match.group(1)) if stenosis_match else None

        has_stent = bool(re.search(r'—Å—Ç–µ–Ω—Ç', line, re.IGNORECASE))
        no_restenosis = bool(re.search(r'–±–µ–∑\s+—Ä–µ—Å—Ç–µ–Ω–æ–∑–∞', line, re.IGNORECASE))
        has_restenosis = bool(re.search(r'—Ä–µ—Å—Ç–µ–Ω–æ–∑', line, re.IGNORECASE)) and not no_restenosis

        findings.append({
            'artery': artery_full,
            'genitive': genitive,
            'occlusion': occlusion,
            'percent': percent,
            'has_stent': has_stent,
            'no_restenosis': no_restenosis,
            'has_restenosis': has_restenosis,
            'raw_line': line
        })

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–∏–∞–≥–Ω–æ–∑–∞
    has_significant = any(
        f['occlusion'] or (f['percent'] is not None and f['percent'] >= 50)
        for f in findings
    )
    has_atherosclerosis = any(
        f['occlusion'] or 
        f['percent'] is not None or 
        re.search(r'–Ω–µ—Ä–æ–≤–Ω|–∫–∞–ª—å—Ü|–∞—Ç–µ—Ä–æ—Å–∫–ª|–ø–æ—Ä–∞–∂–µ–Ω|–±–ª—è—à–∫|—Å—É–∂–µ–Ω–∏–µ|–±–∏—Ñ—É—Ä–∫–∞—Ü', f['raw_line'], re.IGNORECASE)
        for f in findings
    )
    has_stents = any(f['has_stent'] for f in findings)

    # === –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ ===
    if has_significant:
        parts = []
        for f in findings:
            desc = ""
            if f['occlusion']:
                desc = f"–û–∫–∫–ª—é–∑–∏—è {f['genitive']}"
            elif f['percent'] is not None and f['percent'] >= 50:
                desc = f"–°—Ç–µ–Ω–æ–∑ {f['genitive']} {f['percent']}%"
            else:
                if f['has_stent']:
                    stent_str = "—Å—Ç–µ–Ω—Ç"
                    if f['no_restenosis']:
                        stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                    elif f['has_restenosis']:
                        stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                    else:
                        stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                    desc = f"–°—Ç–µ–Ω—Ç {f['genitive']} {stent_str.split(' ', 1)[1]}"
                else:
                    continue

            if f['has_stent'] and (f['occlusion'] or (f['percent'] is not None and f['percent'] >= 50)):
                stent_str = "—Å—Ç–µ–Ω—Ç"
                if f['no_restenosis']:
                    stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                elif f['has_restenosis']:
                    stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                else:
                    stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                desc += f", {stent_str}"

            if desc:
                parts.append(desc)

        diagnosis = "–ê—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π."
        if parts:
            diagnosis += " " + ". ".join(parts) + "."
        return diagnosis

    elif has_atherosclerosis or has_stents:
        stent_parts = []
        for f in findings:
            if f['has_stent']:
                stent_str = f"–°—Ç–µ–Ω—Ç {f['genitive']}"
                if f['no_restenosis']:
                    stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                elif f['has_restenosis']:
                    stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                else:
                    stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                stent_parts.append(stent_str)
        diagnosis = "–ù–µ—Å—Ç–µ–Ω–æ–∑–∏—Ä—É—é—â–∏–π –∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π."
        if stent_parts:
            diagnosis += " " + ". ".join(stent_parts) + "."
        return diagnosis

    else:
        return "–ò–Ω—Ç–∞–∫—Ç–Ω—ã–µ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–µ –∞—Ä—Ç–µ—Ä–∏–∏."

# === Streamlit UI ===
st.set_page_config(page_title="–ö–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Üí –î–∏–∞–≥–Ω–æ–∑", page_icon="ü´Ä")
st.title("ü´Ä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –¥–∏–∞–≥–Ω–æ–∑")

user_input = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:", height=300, value="""–°—Ç–≤–æ–ª –õ–ö–ê:  –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏–π. 
–ü–ù–ê:  —Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º–∏, –±–∏—Ñ—É—Ä–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–Ω–æ–∑ –ü–ù–ê (80%)-–î–í (90%) (1:1:1 –ø–æ Medina)
–û–ê:  —Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º–∏, –æ–∫–∫–ª—é–∑–∏—è –≤ –¥/3, –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏—Å–∏—Å—Ç–µ–º–Ω–æ
–ü–ö–ê:  —Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å—Ç–µ–Ω–æ–∑ –≤ —Å/3 40%, –≤ –¥/3 75%, —Å—Ç–µ–Ω–æ–∑ –≤ —É—Å—Ç—å–µ –ó–ú–ñ–í 75%, —Å—Ç–µ–Ω–æ–∑ –õ–ñ–í 99%""")

if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑", type="primary"):
    diagnosis = parse_coronary_report(user_input)
    st.subheader("–î–∏–∞–≥–Ω–æ–∑:")
    st.write(diagnosis)
