import streamlit as st
import re

ARTERIES = {
    "–ø–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø–µ—Ä–µ–¥–Ω–µ–π –Ω–∏—Å—Ö–æ–¥—è—â–µ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–æ–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–æ–≥–∏–±–∞—é—â–µ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø—Ä–∞–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏": "—Å—Ç–≤–æ–ª–∞ –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ç–≤–∏",
    "–≤–µ—Ç–≤—å —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è": "–≤–µ—Ç–≤–∏ —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è",
    "–∑–∞–¥–Ω—è—è –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å": "–∑–∞–¥–Ω–µ–π –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –≤–µ—Ç–≤–∏",
    "–ª–µ–≤–∞—è –∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å": "–ª–µ–≤–æ–π –∂–µ–ª—É–¥–æ—á–∫–æ–≤–æ–π –≤–µ—Ç–≤–∏",
    "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è": "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
}

ABBREVIATIONS = {
    "–ø–Ω–∞": "–ø–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–æ–∞": "–æ–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–ø–∫–∞": "–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–ª–∫–∞": "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "—Å—Ç–≤–æ–ª": "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–¥–±": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å",
    "–¥–≤": "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å",
    "–∑–º–∂–≤": "–∑–∞–¥–Ω—è—è –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å",
    "–ª–∂–≤": "–ª–µ–≤–∞—è –∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å",
    "–≤—Ç–∫": "–≤–µ—Ç–≤—å —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è",
    "–ø–∞": "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
}
# –ü–æ—Ä—è–¥–æ–∫ –≤—ã–≤–æ–¥–∞ –∞—Ä—Ç–µ—Ä–∏–π
ARTERY_ORDER = [
    "—Å—Ç–≤–æ–ª –ª–µ–≤–æ–π –∫–æ—Ä–æ–Ω–∞—Ä–Ω–æ–π –∞—Ä—Ç–µ—Ä–∏–∏",
    "–ø–µ—Ä–µ–¥–Ω—è—è –Ω–∏—Å—Ö–æ–¥—è—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ç–≤—å",
    "–æ–≥–∏–±–∞—é—â–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–≤–µ—Ç–≤—å —Ç—É–ø–æ–≥–æ –∫—Ä–∞—è",
    "–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
    "–∑–∞–¥–Ω—è—è –º–µ–∂–∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å",
    "–ª–µ–≤–∞—è –∂–µ–ª—É–¥–æ—á–∫–æ–≤–∞—è –≤–µ—Ç–≤—å",
    "–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è",
]
def find_percent_near(text, keyword):
    text_lower = text.lower()
    keyword_lower = keyword.lower()
    pos = text_lower.find(keyword_lower)
    if pos == -1:
        return None
    start = max(0, pos - 30)
    end = min(len(text), pos + 50)
    window = text[start:end]
    percents = re.findall(r'(\d+)%', window)
    return int(percents[0]) if percents else None

def parse_coronary_report(text):
    if not text.strip():
        return "–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏."
    
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    findings = {}
    
    # --- –®–∞–≥ 1: –ò–∑–≤–ª–µ–∫–∞–µ–º —è–≤–Ω—ã–µ –ø–∞—Ä—ã –ê–ë–ë–† + % ---
    full_text = text
    for abbr, full_name in ABBREVIATIONS.items():
        if full_name not in ARTERIES:
            continue
        # –ò—â–µ–º: "–∞–±–±—Ä 80%", "–∞–±–±—Ä (80%)", "—Å—Ç–µ–Ω–æ–∑ –∞–±–±—Ä 80%"
        pattern = r'\b' + re.escape(abbr) + r'\s*[\(\-]?\s*(\d+)%'
        matches = re.findall(pattern, full_text, re.IGNORECASE)
        if matches:
            percent = int(matches[0])
            findings[full_name] = {'percent': percent, 'occlusion': False, 'genitive': ARTERIES[full_name]}
    
    # --- –®–∞–≥ 2: –ò—â–µ–º –æ–∫–∫–ª—é–∑–∏–∏ ---
    for abbr, full_name in ABBREVIATIONS.items():
        if full_name not in ARTERIES:
            continue
        if re.search(r'\b–æ–∫–∫–ª—é–∑–∏—è\b.*?\b' + re.escape(abbr) + r'\b|\b' + re.escape(abbr) + r'.*?\b–æ–∫–∫–ª—é–∑–∏—è\b', full_text, re.IGNORECASE):
            if full_name not in findings:
                findings[full_name] = {'percent': None, 'occlusion': True, 'genitive': ARTERIES[full_name]}
            else:
                findings[full_name]['occlusion'] = True

    # --- –®–∞–≥ 3: –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π ‚Äî –ü–ö–ê ---
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∞ —Å "–ü–ö–ê:" –∏ –≤ –Ω–µ–π –µ—Å—Ç—å % >=50, –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –ó–ú–ñ–í/–õ–ñ–í ‚Äî –æ—Ç–Ω–µ—Å—Ç–∏ –∫ –ü–ö–ê
    for line in lines:
        if re.match(r'–ø–∫–∞\s*:', line, re.IGNORECASE):
            # –ù–∞–π–¥—ë–º –≤—Å–µ % –≤ —Å—Ç—Ä–æ–∫–µ
            percents = [int(x) for x in re.findall(r'(\d+)%', line)]
            # –ù–∞–π–¥—ë–º, –∫–∞–∫–∏–µ –∞—Ä—Ç–µ—Ä–∏–∏ —É–∂–µ –∑–∞–Ω—è–ª–∏ —ç—Ç–∏ %
            used_percents = set()
            for abbr in ['–∑–º–∂–≤', '–ª–∂–≤', '–≤—Ç–∫']:
                pattern = r'\b' + re.escape(abbr) + r'\s*[\(\-]?\s*(\d+)%'
                match = re.search(pattern, line, re.IGNORECASE)
                if match:
                    used_percents.add(int(match.group(1)))
            
            # –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—ã–π % >=50, –Ω–µ –∑–∞–Ω—è—Ç—ã–π –¥—Ä—É–≥–∏–º–∏
            for p in percents:
                if p >= 50 and p not in used_percents:
                    findings["–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è"] = {
                        'percent': p,
                        'occlusion': False,
                        'genitive': ARTERIES["–ø—Ä–∞–≤–∞—è –∫–æ—Ä–æ–Ω–∞—Ä–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è"]
                    }
                    break
            break

    # --- –®–∞–≥ 4: –°–æ–±–∏—Ä–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ ---
    findings_list = []
    for full_name, data in findings.items():
        findings_list.append({
            'artery': full_name,
            'genitive': data['genitive'],
            'occlusion': data['occlusion'],
            'percent': data['percent'],
            'has_stent': bool(re.search(r'—Å—Ç–µ–Ω—Ç', full_text, re.IGNORECASE)),
            'no_restenosis': bool(re.search(r'–±–µ–∑\s+—Ä–µ—Å—Ç–µ–Ω–æ–∑–∞', full_text, re.IGNORECASE)),
            'has_restenosis': bool(re.search(r'—Ä–µ—Å—Ç–µ–Ω–æ–∑', full_text, re.IGNORECASE)) and not bool(re.search(r'–±–µ–∑\s+—Ä–µ—Å—Ç–µ–Ω–æ–∑–∞', full_text, re.IGNORECASE)),
        })

    # --- –®–∞–≥ 5: –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É ---
    def sort_key(item):
        if item['artery'] in ARTERY_ORDER:
            return ARTERY_ORDER.index(item['artery'])
        return 999  # –≤ –∫–æ–Ω–µ—Ü

    findings_list.sort(key=sort_key)

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    has_significant = any(
        f['occlusion'] or (f['percent'] is not None and f['percent'] >= 50)
        for f in findings_list
    )
    has_atherosclerosis = any(
        f['occlusion'] or 
        f['percent'] is not None or 
        re.search(r'–Ω–µ—Ä–æ–≤–Ω|–∫–∞–ª—å—Ü|–∞—Ç–µ—Ä–æ—Å–∫–ª|–ø–æ—Ä–∞–∂–µ–Ω|–±–ª—è—à–∫|—Å—É–∂–µ–Ω–∏–µ|–±–∏—Ñ—É—Ä–∫–∞—Ü', text, re.IGNORECASE)
        for f in findings_list
    )
    has_stents = any(f['has_stent'] for f in findings_list)

    if has_significant:
        parts = []
        for f in findings_list:
            desc = ""
            if f['occlusion']:
                desc = f"–û–∫–∫–ª—é–∑–∏—è {f['genitive']}"
            elif f['percent'] is not None and f['percent'] >= 50:
                desc = f"–°—Ç–µ–Ω–æ–∑ {f['genitive']} {f['percent']}%"
            else:
                if f['has_stent']:
                    stent_str = "—Å—Ç–µ–Ω—Ç"
                    if f['no_restenosis']:
                        stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                    elif f['has_restenosis']:
                        stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                    else:
                        stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                    desc = f"–°—Ç–µ–Ω—Ç {f['genitive']} {stent_str.split(' ', 1)[1]}"
                else:
                    continue

            if f['has_stent'] and (f['occlusion'] or (f['percent'] is not None and f['percent'] >= 50)):
                stent_str = "—Å—Ç–µ–Ω—Ç"
                if f['no_restenosis']:
                    stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                elif f['has_restenosis']:
                    stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                else:
                    stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                desc += f", {stent_str}"

            if desc:
                parts.append(desc)

        diagnosis = "–ê—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π."
        if parts:
            diagnosis += " " + ". ".join(parts) + "."
        return diagnosis

    elif has_atherosclerosis or has_stents:
        stent_parts = []
        for f in findings_list:
            if f['has_stent']:
                stent_str = f"–°—Ç–µ–Ω—Ç {f['genitive']}"
                if f['no_restenosis']:
                    stent_str += " –±–µ–∑ —Ä–µ—Å—Ç–µ–Ω–æ–∑–∞"
                elif f['has_restenosis']:
                    stent_str += " —Å —Ä–µ—Å—Ç–µ–Ω–æ–∑–æ–º"
                else:
                    stent_str += " (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Ç–æ—á–Ω–µ–Ω–æ)"
                stent_parts.append(stent_str)
        diagnosis = "–ù–µ—Å—Ç–µ–Ω–æ–∑–∏—Ä—É—é—â–∏–π –∞—Ç–µ—Ä–æ—Å–∫–ª–µ—Ä–æ–∑ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã—Ö –∞—Ä—Ç–µ—Ä–∏–π."
        if stent_parts:
            diagnosis += " " + ". ".join(stent_parts) + "."
        return diagnosis

    else:
        return "–ò–Ω—Ç–∞–∫—Ç–Ω—ã–µ –∫–æ—Ä–æ–Ω–∞—Ä–Ω—ã–µ –∞—Ä—Ç–µ—Ä–∏–∏."

# === Streamlit UI ===
st.set_page_config(page_title="–ö–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Üí –î–∏–∞–≥–Ω–æ–∑", page_icon="ü´Ä")
st.title("ü´Ä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è –∫–æ—Ä–æ–Ω–∞—Ä–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –¥–∏–∞–≥–Ω–æ–∑")

user_input = st.text_area("–í—Å—Ç–∞–≤—å—Ç–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ:", height=300, value="""–°—Ç–≤–æ–ª –õ–ö–ê:  –±–µ–∑ –ø–æ—Ä–∞–∂–µ–Ω–∏–π. 
–ü–ù–ê:  —Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º–∏, –±–∏—Ñ—É—Ä–∫–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–Ω–æ–∑ –ü–ù–ê (80%)-–î–í (90%) (1:1:1 –ø–æ Medina)
–û–ê:  —Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º–∏, –æ–∫–∫–ª—é–∑–∏—è –≤ –¥/3, –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏—Å–∏—Å—Ç–µ–º–Ω–æ
–ü–ö–ê:  —Å –ø–æ—Ä–∞–∂–µ–Ω–∏—è–º–∏, —Å—Ç–µ–Ω–æ–∑ –≤ —Å/3 40%, –≤ –¥/3 75%, —Å—Ç–µ–Ω–æ–∑ –≤ —É—Å—Ç—å–µ –ó–ú–ñ–í 75%, —Å—Ç–µ–Ω–æ–∑ –õ–ñ–í 99%""")

if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥–Ω–æ–∑", type="primary"):
    diagnosis = parse_coronary_report(user_input)
    st.subheader("–î–∏–∞–≥–Ω–æ–∑:")
    st.write(diagnosis)
